---
name: docker

on:
  push:
    branches:
    - main
    tags:
    - '*'
  pull_request:
    branches:
    - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  USER_NAME: bids
  REPO_NAME: giga_connectome

jobs:
  download-test-data:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v5
    - name: install tox
      run: pip install tox
    - run: echo ${HOME}
    - uses: actions/cache@v4
      id: cache
      env:
        cache-name: ds000017
      with:
        path: "/home/runner/work/giga_connectome/giga_connectome/giga_connectome/data/test_data"
        key: ${{ env.cache-name }}
    - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      name: Download fmriprep derivative of ds000017
      id: download
      run: tox -e test_data

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/cache@v4
        env:
          cache-name: docker
        with:
          path: "~/docker/"
          key: ${{ env.cache-name }}
      - name: Build the Docker image
        run: |
          docker build . --file Dockerfile --tag ${{env.USER_NAME}}/giga_connectome
          mkdir -p "~/docker"
          docker save "${{env.USER_NAME}}/giga_connectome" > "~/docker/image.tar"
          docker images

  docker-run:
    runs-on: ubuntu-latest
    needs: [download-test-data, docker-build]
    steps:
      - name: Restore cached docker image
        uses: actions/cache/restore@v4
        with:
          path: "~/docker/"
          key: docker
      - name: Restore cached data ds000017
        uses: actions/cache/restore@v4
        with:
          path: /home/runner/work/${{ github.repository }}/giga_connectome/data/test_data
          key: ds000017
      - name: Test the Docker image
        run: |
          docker load -i ${HOME}/docker/image.tar
          docker run --rm --read-only \
            -v /home/runner/work/${{ github.repository }}/giga_connectome/data/test_data:/test_data \
            -v ./outputs:/outputs \
            -v ./outputs/working_dir:/work \
              bids/giga_connectome \
                /test_data/ds000017-fmriprep22.0.1-downsampled-nosurface \
                /outputs \
                participant \
                -w /work \
                --participant_label 1 \
                --reindex-bids

  docker-push:
    runs-on: ubuntu-latest
    needs: [docker-run]
    steps:
      - name: Restore cached docker image
        uses: actions/cache/restore@v4
        with:
          path: "~/docker/"
          key: docker
      - name: load image
        run: docker load -i ~/docker/image.tar
      - name: push unstable to dockerhub on tags or on main
        if:  ${{  github.ref_name }} == "main" || ${{  github.ref_type }} == "tag"
        run: |
          if [[ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]]; then

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            : "Pushing unstable versions to DockerHub"

            unstable="${{env.USER_NAME}}/${{env.REPO_NAME}}:unstable"

            docker tag "${{env.USER_NAME}}/${{env.REPO_NAME}}" "${unstable}"
            docker push "${unstable}"
          else
            : "No DOCKER_TOKEN, skipping push to DockerHub"
            exit 1
          fi
      - name: push stable release to dockerhub on tags only
        if: ${{  github.ref_type }} == "tag"
        run: |
          if [[ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]]; then

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            : "Pushing stable and latest versions to DockerHub for latest and  ${{  github.ref_name }}"

            latest="${{env.USER_NAME}}/${{env.REPO_NAME}}:latest"
            docker tag "${unstable}" "${latest}"
            docker push "${latest}"
            tagged_release="${{env.USER_NAME}}/${{env.REPO_NAME}}:${{  github.ref_name }}"
            docker tag "${unstable}" "${tagged_release}"
            docker push "${tagged_release}"

          else
              : "No DOCKER_TOKEN, skipping push to DockerHub"
              exit 1
          fi
